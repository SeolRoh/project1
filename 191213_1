use hr;
-- 가장 많은 부하직원을 가지고 있는 직원?
select max(cnt)
from
	(select manager_id, count(manager_id) as cnt
	from employees
	group by manager_id) as result ;

select count(manager_id) as 'count'
				from employees
				group by manager_id;
-- 직업ID IT_PROG + 급여(SALARY)가 급여 테이블의 D레벨에 있는 직원 ->union(합집합)

select employee_id, first_name, last_name, salary, job_id
from hr.employees
where job_id Like '%IT%' 
and (salary between 10000 and 15000) ;

SELECT * FROM hr.job_grades;

select employee_id, first_name, last_name, salary,job_id 
from hr.employees 
where job_grades.job_id Like '%IT%'
UNION
select employee_id, first_name, last_name, salary,job_id 
from employees
where job_grades.grade_level Like 'D';

#(salary between 10000 and 15000);

select  d.department_name
		, count(e.employee_id) 
from departments d join employees e
on d.department_id = e.department_id
group by d.department_name
having count(e.employee_id) >= 5
order by 2 desc;
 
-- [문제 2] 각 사원의 급여에 따른 급여 등급을 보고하려고 한다. 급여 등급은 JOB_GRADES 테이블에 표시된다. 
-- 해당 테이블의 구조를 살펴본 후 사원의 성과 이름(Name으로 별칭), 업무, 부서명, 입사일, 급여, 급여등급을 출력하시오.
-- 	- employees, departments, job_grades
 select concat(e.first_name,' ',e.last_name) as name
 ,e.job_id
 ,d.department_name
 ,e.hire_date
 ,e.salary
 ,j.grade_level
 from employees e,departments d,job_grades j
 where e.department_id =d.department_id
 and e.salary between j.lowest_sal and j.highest_sal;
 
 -- [3] 사원의 급여 정보 중 업무별 최소 급여를 받고 있는 사원의 성과 이름(Nam으로 별칭), 업무, 급여, 입사일을 출력하시오.
 select concat(first_name,' ',last_name) as name
 , job_id
 , d.department_name
 , salary
 , hire_date
 from employees e1,departments d,job_grades j
 where salary in (select min(salary)
					from employees e2
					where e1.job_id = e2.job_id
                    group by job_id);
 
 
 
 -- e.last_name Like '%Nam%';
 -- [4] 소속 부서의 평균 급여보다 많은 급여를 받는 사원에 대하여 사원의 성과 이름(Name으로 별칭), 급여, 부서번호, 업무를 출력하시오
 select concat(first_name,' ',last_name) as name
 , job_id
 , salary
 , hire_date
 from employees e1
 where salary > (select avg(salary)
					from employees e2
					where department_id = e1.department_id);

 
[5] 사원정보(Employees) 테이블에 JOB_ID는 사원의 현재 업무를 뜻하고, JOB_HISTORY에 JOB_ID는 사원의 이전 업무를 뜻한다.
 이 두 테이블을 교차해보면 업무가 변경된 사원의 정보도 볼 수 있지만 이전에 한번 했던 같은 업무를 그대로 하고 있는 사원의 정보도 볼 수 있다. 
 이전에 한번 했던 같은 업무를 보고 있는 사원의 사번과 업무를 출력하시오.
위 결과를 이용하여 출력된 176번 사원의 업무 이력의 변경 날짜 이력을 조회하시오.
select e.employee_id,e.job_id
from employees e join job_history j
on e.employee_id = j.employee_id
where e.job_id = j.job_id ;

select employee_id,job_id,''as 'start date','' as 'end date'
from employees
where employee_id = 101
union
select employee_id, job_id, start_date,end_date
from job_history
where employee_id = 101;

create table newcustomer(
	custid integer primary key,
    name varchar(40) not null,
    address varchar(30),
    phone varchar(30) unique,
    join_date datetime default now()
);

create table Book(
	bookid integer primary key,
    bookname varchar(40) not null,
    publisher varchar(40),
    price integer
);

insert into Book(
	bookid,
    bookname,
    publisher,
    price)
    values (11,'스포츠의학','한솔의학서적','90000');
    
select *
from Book;
drop table newcustomer;
